<%- include('./layouts/head.ejs') %>
<%- include('./layouts/header.ejs') %>

<body>
  <main style="padding:16px;">
    <h2>Objetivos — Compras (versión básica funcional)</h2>

    <!-- ===== Filtros básicos ===== -->
    <section>
      <div>
        <label>Periodo:
          <select id="periodo">
            <option value="diario">diario</option>
            <option value="semanal">semanal</option>
            <option value="mensual">mensual</option>
            <option value="anual">anual</option>
          </select>
        </label>
      </div>

      <div style="margin-top:6px;">
        <label>Tipo:
          <select id="tipo">
            <option value="TOTAL">TOTAL</option>
            <option value="A">A (Facturas)</option>
            <option value="B">B (Presupuestos)</option>
          </select>
        </label>
      </div>

      <div style="margin-top:6px;">
        <label>Desde: <input id="desde" type="date"></label>
        <label style="margin-left:8px;">Hasta: <input id="hasta" type="date"></label>
      </div>

      <div style="margin-top:10px;">
  <button id="btnBuscar">Buscar</button>
  <label style="margin-left:10px;">
    <input type="checkbox" id="chkSoloSeleccion"> Mostrar solo serie seleccionada
  </label>
</div>

    </section>

    <hr style="margin:16px 0;">

    <!-- ===== Estado / mensajes ===== -->
    <div id="estado">Esperando búsqueda…</div>
    <div id="error" style="color:red; display:none;"></div>

    <hr style="margin:16px 0;">

    <!-- ===== KPIs mínimos ===== -->
    <section>
      <h3>Resultados</h3>
      <p><strong>Periodo/Tipo:</strong> <span id="lblPeriodo">-</span> / <span id="lblTipo">-</span></p>
      <p><strong>Total del periodo (según Tipo):</strong> <span id="kpiTotal">0</span></p>
      <p>
        <strong>Detalle totales:</strong>
        A (Facturas): <span id="totA">0</span> ·
        B (Presupuestos): <span id="totB">0</span> ·
        TOTAL: <span id="totTotal">0</span>
      </p>
    </section>

    <hr style="margin:16px 0;">

    <!-- ===== Tabla de series ===== -->
    <section>
      <h3>Series</h3>
      <p>La tabla muestra las etiquetas devueltas por la API y los valores de A, B y TOTAL. La columna “Serie Seleccionada” muestra la serie del tipo elegido (TOTAL/A/B).</p>

      <table id="tablaSeries" border="1" cellpadding="6" cellspacing="0">
        <thead>
          <tr>
            <th>Etiqueta</th>
            <th>A (Facturas)</th>
            <th>B (Presupuestos)</th>
            <th>TOTAL</th>
            <th>Serie Seleccionada</th>
          </tr>
        </thead>
        <tbody>
          <!-- filas generadas por JS -->
        </tbody>
      </table>
    </section>
  </main>

 <script>
  // ===== Helpers básicos =====
  function qs(params) {
    const sp = new URLSearchParams();
    Object.entries(params).forEach(([k, v]) => { if (v !== undefined && v !== null && v !== '') sp.set(k, v); });
    return sp.toString();
  }
  function money(n) {
    return Number(n || 0).toLocaleString('es-AR', { style: 'currency', currency: 'ARS', maximumFractionDigits: 0 });
  }

  // ===== Referencias DOM =====
  const $periodo = document.getElementById('periodo');
  const $tipo    = document.getElementById('tipo');
  const $desde   = document.getElementById('desde');
  const $hasta   = document.getElementById('hasta');
  const $btn     = document.getElementById('btnBuscar');
  const $soloSel = document.getElementById('chkSoloSeleccion'); // <— checkbox opcional

  const $estado  = document.getElementById('estado');
  const $error   = document.getElementById('error');

  const $lblPeriodo = document.getElementById('lblPeriodo');
  const $lblTipo    = document.getElementById('lblTipo');
  const $kpiTotal   = document.getElementById('kpiTotal');
  const $totA       = document.getElementById('totA');
  const $totB       = document.getElementById('totB');
  const $totTotal   = document.getElementById('totTotal');

  const $tabla      = document.getElementById('tablaSeries');
  const $tablaHead  = $tabla.querySelector('thead tr');
  const $tablaBody  = $tabla.querySelector('tbody');

  // ===== Cargar datos =====
  async function buscar() {
    // estado
    $error.style.display = 'none';
    $error.textContent = '';
    $estado.textContent = 'Buscando…';

    // params
    const periodo = $periodo.value;
    const tipo    = $tipo.value;
    const desde   = $desde.value;
    const hasta   = $hasta.value;
    const soloSel = $soloSel ? $soloSel.checked : false;

    // (opcional) si no querés permitir "diario", mostramos aviso rápido
    if (periodo === 'diario') {
      $estado.textContent = 'El periodo diario no se utiliza para comparativas. Elegí semanal, mensual o anual.';
      // Si igual querés consultar diario, eliminá el return de abajo:
      return;
    }

    const params = { periodo, tipo };
    if (desde) params.desde = desde;
    if (hasta) params.hasta = hasta;

    try {
      const url = `/administracion/api/objetivos-compras?${qs(params)}`;
      const res = await fetch(url);
      const data = await res.json();

      if (!res.ok || !data.ok) {
        throw new Error(data && data.error ? data.error : 'Error desconocido en API');
      }

      // pintar encabezados KPI
      $lblPeriodo.textContent = (desde && hasta) ? `${desde} → ${hasta}` : periodo;
      $lblTipo.textContent    = tipo;

      // KPIs
      $kpiTotal.textContent = money(data.kpi.totalPeriodo);
      $totA.textContent     = money(data.totales.A);
      $totB.textContent     = money(data.totales.B);
      $totTotal.textContent = money(data.totales.TOTAL);

      // Series
      const labels = data.series.labels || [];
      const serieA = data.series.A || [];
      const serieB = data.series.B || [];
      const serieT = data.series.TOTAL || [];
      const serieSel = (tipo === 'A') ? serieA : (tipo === 'B') ? serieB : serieT;

      // Encabezado dinámico
      if (soloSel) {
        $tablaHead.innerHTML = `
          <th>Etiqueta</th>
          <th>Serie (${tipo})</th>
        `;
      } else {
        $tablaHead.innerHTML = `
          <th>Etiqueta</th>
          <th>A (Facturas)</th>
          <th>B (Presupuestos)</th>
          <th>TOTAL</th>
          <th>Serie Seleccionada</th>
        `;
      }

      // limpiar cuerpo
      $tablaBody.innerHTML = '';

      if (!labels.length) {
        const tr = document.createElement('tr');
        const td = document.createElement('td');
        td.colSpan = soloSel ? 2 : 5;
        td.textContent = 'Sin datos para los filtros seleccionados.';
        tr.appendChild(td);
        $tablaBody.appendChild(tr);
        $estado.textContent = 'Listo (0 filas).';
        return;
      }

      // generar filas
      for (let i = 0; i < labels.length; i++) {
        const tr = document.createElement('tr');

        const tdLbl = document.createElement('td');
        tdLbl.textContent = labels[i] ?? '';
        tr.appendChild(tdLbl);

        if (soloSel) {
          const tdS = document.createElement('td');
          tdS.textContent = money(serieSel[i] ?? 0);
          tr.appendChild(tdS);
        } else {
          const tdA = document.createElement('td'); tdA.textContent = money(serieA[i] ?? 0);
          const tdB = document.createElement('td'); tdB.textContent = money(serieB[i] ?? 0);
          const tdT = document.createElement('td'); tdT.textContent = money(serieT[i] ?? 0);
          const tdS = document.createElement('td'); tdS.textContent = money(serieSel[i] ?? 0);
          tr.appendChild(tdA); tr.appendChild(tdB); tr.appendChild(tdT); tr.appendChild(tdS);
        }

        $tablaBody.appendChild(tr);
      }

      $estado.textContent = `Listo (${labels.length} fila(s)).`;
    } catch (e) {
      console.error(e);
      $estado.textContent = 'Error.';
      $error.textContent = `❌ ${e.message}`;
      $error.style.display = 'block';
    }
  }

  // eventos
  $btn.addEventListener('click', buscar);
  if ($soloSel) $soloSel.addEventListener('change', () => {
    // re-render rápido si ya hay datos en pantalla: simulamos click en Buscar
    // (si preferís no recargar, podés almacenar el último data en memoria)
    // buscar();
  });

  // carga inicial (si querés que inicie vacío, dejalo comentado)
  // document.addEventListener('DOMContentLoaded', buscar);
</script>


  <%- include('./layouts/footer.ejs') %>
</body>
